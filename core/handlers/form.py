from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from core.utils.statesform import StepsForm, ClientRentForm
from aiogram import Bot
from core.keyboards.reply import reply_cancel_keyboard, reply_location_keyboard, reply_phone_keyboard
from core.keyboards.inline import start_checkout_ikb, get_vacuum_list_ikb, get_steam_list_ikb, get_dry_list_ikb, \
    get_main_menu_ikb, get_product_list_ikb, get_choose_time_ikb, get_main_menu_button, get_cancel_button_ikb
from core.utils.sqlite_db import db_create_product
from core.aiogram3_calendar.simple_calendar import SimpleCalendar
from core.settings import settings
from core.utils.googlesheets import create_new_sheet, open_and_update_sheet, show_free_dates, get_is_free_date, open_and_update_vacuums_sheet
import datetime

"""Admin"""


async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply(text='‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå',
                        reply_markup=ReplyKeyboardRemove())
    await state.clear()


async def get_form(message: Message, state: FSMContext):
    if message.from_user.id not in (settings.bots.admin_id, settings.bots.admin2_id):
        return
    await message.answer(text=f'‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª\nü§ñ  –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'
                              f'\nüèÑ‚Äç‚ôÇ  –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª\n'
                              f'‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ</b> ‚ùó\n'
                              f'–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–ê–¢–ï–ì–û–†–ò–Ø][–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï]\n'
                              f'–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ü—ã–ª–µ—Å–æ—Å Karcher Puzzi 8/1</b>\n'
                              f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å:\n'
                              f'<b>–ü—ã–ª–µ—Å–æ—Å</b>, <b>–ü–∞—Ä–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å</b> –∏ <b>–§–µ–Ω</b>\n'
                              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –û–î–ù–ò–ú —Å–ª–æ–≤–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\n'
                              f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, –Ω–æ –∏–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ —ç—Ç–æ –∂–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å '
                              f'–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è 1-3 —Å–ª–æ–≤–∞–º–∏\n'
                              f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å\n'
                              f'–ê —Ç–µ–ø–µ—Ä—å <b>–ù–∞–ø–∏—à–∏</b> –∏ <b>–û—Ç–ø—Ä–∞–≤—å</b> –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                         reply_markup=reply_cancel_keyboard)
    await state.set_state(StepsForm.GET_NAME)
    await message.delete()


async def get_name(message: Message, state: FSMContext):
    await message.answer(f'‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª\nüèÑ‚Äç‚ôÇ  –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª')
    await state.update_data(name=message.text)
    await state.set_state(StepsForm.GET_PHOTO)
    await message.delete()


async def get_photo(message: Message, state: FSMContext):
    await message.answer(f'‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª\nüèÑ‚Äç‚ôÇ  –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ü–µ–Ω—É\n‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª')
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(StepsForm.GET_PRICE)
    await message.delete()


async def get_price(message: Message, state: FSMContext):
    await message.answer(f'‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª\nüèÑ‚Äç‚ôÇ  –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª‚ôª')
    await state.update_data(price=message.text)
    await state.set_state(StepsForm.GET_DESCRIPTION)
    await message.delete()


async def get_description(message: Message, bot: Bot, state: FSMContext):
    context_data = await state.get_data()
    name = context_data.get('name')
    photo = context_data.get('photo')
    price = context_data.get('price')
    create_new_sheet(' '.join(name.split()[1:]))  # create new sheet in google sheet
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=photo,
                         caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.text}',
                         reply_markup=ReplyKeyboardRemove())
    await db_create_product((name, photo, price, message.text))
    await message.delete()
    await state.clear()


"""Client"""


async def cmd_cancel_checkout(callback: CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state is None:
        return

    await callback.answer(text='‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå',
                          show_alert=True)
    await state.clear()
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üß∞ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µ‚§µ‚§µ',
                           reply_markup=get_main_menu_ikb())
    await callback.message.delete()
    await callback.answer()


async def get_start_checkout(callback: CallbackQuery, bot: Bot):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.',
                           reply_markup=start_checkout_ikb())
    await callback.message.delete()
    await callback.answer()


async def get_our_prod_call(callback: CallbackQuery, bot: Bot):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='ü§ñ –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                           reply_markup=get_product_list_ikb())
    await callback.message.delete()
    await callback.answer()


async def get_form_client(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(ClientRentForm.GET_PRODUCT)
    if callback.data == 'vacuum':
        await bot.send_message(chat_id=callback.from_user.id,
                               text='ü§ñ –ù–∞—à–∏ –º–æ—é—â–∏–µ –ø—ã–ª–µ—Å–æ—Å—ã ‚§µ‚§µ‚§µ',
                               reply_markup=await get_vacuum_list_ikb())
        await callback.message.delete()
        return await callback.answer()
    if callback.data == 'steam':
        await bot.send_message(chat_id=callback.from_user.id,
                               text='ü§ñ –ù–∞—à–∏ –ø–∞—Ä–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏ ‚§µ‚§µ‚§µ',
                               reply_markup=await get_steam_list_ikb())
        await callback.message.delete()
        return await callback.answer()
    if callback.data == 'dry':
        await bot.send_message(chat_id=callback.from_user.id,
                               text='ü§ñ –ù–∞—à–∏ —Ñ–µ–Ω—ã ‚§µ‚§µ‚§µ',
                               reply_markup=await get_dry_list_ikb())
        await callback.message.delete()
        return await callback.answer()


async def get_product_name_state(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(product=callback.data)

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'‚úÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã:\n{show_free_dates(callback.data)}')  # show free dates from google sheet

    await bot.send_message(chat_id=callback.from_user.id,
                           text='üóì –í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ ‚§µ‚§µ‚§µ',
                           reply_markup=await SimpleCalendar().start_calendar())
    await state.set_state(ClientRentForm.GET_DATE)
    await callback.message.delete()
    await callback.answer()


async def process_simple_calendar(callback: CallbackQuery, callback_data: dict, state: FSMContext, bot: Bot):
    """Aiogram calendar process"""

    context_data = await state.get_data()
    product = context_data.get('product')

    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        date = date.date()
        now = datetime.date.today()
        if date < now:
            await callback.message.answer(text='‚ùó –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É\n\nüóì –í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ ‚§µ‚§µ‚§µ',
                                          reply_markup=await SimpleCalendar().start_calendar())
            await callback.message.delete()
            await callback.answer()
            return
        elif get_is_free_date(product, date.strftime("%d/%m/%Y")):
            await callback.message.answer(text='‚ùó –≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞\n\nüóì –í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ ‚§µ‚§µ‚§µ',
                                          reply_markup=await SimpleCalendar().start_calendar())

            await callback.message.delete()
            await callback.answer()
            return

        await state.update_data(date=f'{date.strftime("%d/%m/%Y")}')
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(text=f'üóì –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: <b>{date.strftime("%d/%m/%Y")}</b>')
        await callback.message.answer(f'‚ùì –ö—É–¥–∞ –ø—Ä–∏–≤–µ–∑—Ç–∏? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å ‚§µ‚§µ‚§µ',
                                      reply_markup=get_cancel_button_ikb())
        await state.set_state(ClientRentForm.GET_ADDRESS)

    await callback.answer()


async def get_address(message: Message, bot: Bot, state: FSMContext):
    await message.answer(text=f'üè† –í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å: <b>{message.text}</b>')
    await message.answer(text=f'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚§µ‚§µ‚§µ',
                         reply_markup=get_cancel_button_ikb())
    await state.update_data(address=message.text)
    await state.set_state(ClientRentForm.GET_PHONE)
    await message.delete()
    try:
        await bot.delete_message(chat_id=message.from_user.id,
                                 message_id=message.message_id - 1)
    except:
        pass


async def get_phone(message: Message, bot: Bot, state: FSMContext):
    """Google sheet process"""
    context_data = await state.get_data()
    product = context_data.get('product')
    date = context_data.get('date')
    address = context_data.get('address')
    message_text = (f'üéâ {message.from_user.first_name}, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç üéâ\n'
                    f'–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É.\n\n'
                    f'–¢–æ–≤–∞—Ä: {product}\n'
                    f'–î–∞—Ç–∞: {date}\n'
                    f'–ê–¥—Ä–µ—Å: {address}\n'
                    f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.text}')
    if product == 'KARCHER PUZZI 10/1':
        open_and_update_vacuums_sheet(product=product,
                                      date=date,
                                      all_info=f'{message.from_user.id}\n'
                                               f'{message.from_user.first_name}\n'
                                               f'{address}\n'
                                               f'{message.text}')  # open and update vacuums worksheet_by_title
    else:
        open_and_update_sheet(product=product,
                              date=date,
                              dialog_id=message.from_user.id,
                              name=message.from_user.first_name,
                              address=address,
                              phone=message.text)  # open and update worksheet_by_title
    await bot.send_message(chat_id=message.from_user.id,
                           text=message_text,
                           reply_markup=get_main_menu_button())
    for admin in [settings.bots.admin_id]:
    # for admin in [settings.bots.admin_id, settings.bots.admin2_id]:
        await bot.send_message(chat_id=admin,
                               text=message_text,
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton
                                                                                   (text=message.from_user.first_name,
                                                                                    url=f'tg://user?id={message.from_user.id}')]]))
    for i in range(10):
        try:
            await bot.delete_message(chat_id=message.from_user.id,
                                     message_id=message.message_id - i)
        except:
            continue

    await state.clear()
